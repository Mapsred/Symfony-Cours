<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Quote;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * VoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * 
 * Class VoteRepository
 * @package AppBundle\Repository
 */
class VoteRepository extends EntityRepository
{
    /**
     * @param Quote $quote
     * @return int
     */
    public function countForQuote(Quote $quote)
    {
        return $this->createQueryBuilder('l')
            ->select('COUNT(l)')
            ->where("l.quote = :quote")
            ->setParameter("quote", $quote)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param Quote $quote
     * @param string $type
     * @return int
     */
    public function countTypeForQuote(Quote $quote, $type)
    {
        return $this->createQueryBuilder('l')
            ->select('COUNT(l)')
            ->where("l.quote = :quote")
            ->andWhere("l.type = :type")
            ->setParameters(["quote" => $quote, "type" => $type])
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param Quote $quote
     * @return array
     */
    public function findByQuote(Quote $quote)
    {
        return $this->findBy(['quote' => $quote]);
    }

    /**
     * @param Quote $quote
     * @param string $type
     * @return array
     */
    public function findByQuoteAndType(Quote $quote, $type = "no")
    {
        return $this->findBy(['quote' => $quote], ["type" => $type]);

    }

    /**
     * @param Quote $quote
     * @param User $user
     * @param string $type
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByQuoteUserType(Quote $quote, User $user, $type = "no")
    {
        return $this->createQueryBuilder('query')
            ->where("query.quote = :quote")
            ->andWhere("query.user = :user")
            ->andWhere("query.type = :type")
            ->setParameters(["quote" => $quote, "user" => $user, "type" => $type])
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Quote $quote
     * @param User $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByQuoteUser(Quote $quote, User $user)
    {
        return $this->createQueryBuilder('query')
            ->where("query.quote = :quote")
            ->andWhere("query.user = :user")
            ->setParameters(["quote" => $quote, "user" => $user])
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $type
     * @param $limit
     * @return array
     */
    public function findAllGroupByQuote($type, $limit)
    {
        /** @noinspection SqlNoDataSourceInspection */
        $sql = "SELECT quote, count(type) counter FROM `vote` WHERE type = '$type' GROUP BY quote ORDER BY counter DESC LIMIT $limit";
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult("quote", "quote");
        $rsm->addScalarResult("counter", "counter");
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $results = $query->getResult();

        foreach ($results as $key => $result) {
            $results[$key]['quote'] = $this->_em->getRepository("AppBundle:Quote")->findOneById($result['quote']);
        }

        return $results;
    }

}
